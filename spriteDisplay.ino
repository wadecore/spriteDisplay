#include <Adafruit_NeoPixel.h>

const int PIXEL_PIN = 6;
Adafruit_NeoPixel strip = Adafruit_NeoPixel(80, PIXEL_PIN, NEO_GRB + NEO_KHZ800);

char rxChar= 0;

// NG Sprite
uint8_t spriteNG[][3] = {   
                            {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, 
                            {255, 255, 255}, {0, 0, 0}, {0, 0, 0}, {255, 255, 255}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {255, 255, 255}, {255, 255, 255}, {0, 0, 0}, 
                            {255, 255, 255}, {255, 255, 255}, {0, 0, 0}, {255, 255, 255}, {0, 0, 0}, {0, 0, 0}, {255, 255, 255}, {0, 0, 0}, {0, 0, 0}, {255, 255, 255}, 
                            {255, 255, 255}, {255, 255, 255}, {0, 0, 0}, {255, 255, 255}, {0, 0, 0}, {0, 0, 0}, {255, 255, 255}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, 
                            {255, 255, 255}, {0, 0, 0}, {255, 255, 255}, {255, 255, 255}, {0, 0, 0}, {0, 0, 0}, {255, 255, 255}, {0, 0, 0}, {255, 255, 255}, {255, 255, 255}, 
                            {255, 255, 255}, {0, 0, 0}, {255, 255, 255}, {255, 255, 255}, {0, 0, 0}, {0, 0, 0}, {255, 255, 255}, {0, 0, 0}, {0, 0, 0}, {255, 255, 255},
                            {255, 255, 255}, {0, 0, 0}, {0, 0, 0}, {255, 255, 255}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {255, 255, 255}, {255, 255, 255}, {0, 0, 0}, 
                            {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, 
                       };

// Test Sprite
uint8_t spriteTest[][3] = {
                            {0, 0, 255}, {255, 255, 255}, {255, 0, 0}, {0, 255, 0}, {0, 0, 255}, {255, 255, 255}, {255, 0, 0}, {0, 255, 0}, {0, 0, 255}, {255, 255, 255}, 
                            {0, 0, 255}, {255, 255, 255}, {255, 0, 0}, {0, 255, 0}, {0, 0, 255}, {255, 255, 255}, {255, 0, 0}, {0, 255, 0}, {0, 0, 255}, {255, 255, 255}, 
                            {0, 0, 255}, {255, 255, 255}, {255, 0, 0}, {0, 255, 0}, {0, 0, 255}, {255, 255, 255}, {255, 0, 0}, {0, 255, 0}, {0, 0, 255}, {255, 255, 255}, 
                            {0, 0, 255}, {255, 255, 255}, {255, 0, 0}, {0, 255, 0}, {0, 0, 255}, {255, 255, 255}, {255, 0, 0}, {0, 255, 0}, {0, 0, 255}, {255, 255, 255}, 
                            {0, 0, 255}, {255, 255, 255}, {255, 0, 0}, {0, 255, 0}, {0, 0, 255}, {255, 255, 255}, {255, 0, 0}, {0, 255, 0}, {0, 0, 255}, {255, 255, 255}, 
                            {0, 0, 255}, {255, 255, 255}, {255, 0, 0}, {0, 255, 0}, {0, 0, 255}, {255, 255, 255}, {255, 0, 0}, {0, 255, 0}, {0, 0, 255}, {255, 255, 255}, 
                            {0, 0, 255}, {255, 255, 255}, {255, 0, 0}, {0, 255, 0}, {0, 0, 255}, {255, 255, 255}, {255, 0, 0}, {0, 255, 0}, {0, 0, 255}, {255, 255, 255}, 
                            {0, 0, 255}, {255, 255, 255}, {255, 0, 0}, {0, 255, 0}, {0, 0, 255}, {255, 255, 255}, {255, 0, 0}, {0, 255, 0}, {0, 0, 255}, {255, 255, 255}, 
                       };

// Weh Sprite
uint8_t spriteWeh[][3] = {   
                            {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {21, 148, 156}, {21, 148, 156}, {0, 0, 0}, 
                            {0, 0, 0}, {21, 148, 156}, {21, 148, 156}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {21, 148, 156}, 
                            {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, 
                            {0, 0, 0}, {21, 148, 156}, {21, 148, 156}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {21, 148, 156}, {21, 148, 156}, {0, 0, 0}, 
                            {0, 0, 0}, {21, 148, 156}, {21, 148, 156}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {21, 148, 156}, {21, 148, 156}, {0, 0, 0}, 
                            {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, 
                            {0, 0, 0}, {21, 148, 156}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {21, 148, 156}, {21, 148, 156}, {21, 148, 156}, {21, 148, 156}, {0, 0, 0}, 
                            {0, 0, 0}, {21, 148, 156}, {21, 148, 156}, {21, 148, 156}, {21, 148, 156}, {21, 148, 156}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, 
                       };

// Smiley Sprite
uint8_t spriteSmiley[][3] = {   
                            {0, 0, 0}, {255, 255, 0}, {255, 255, 0}, {255, 174, 0}, {0, 0, 0}, {0, 0, 0}, {255, 174, 0}, {255, 255, 0}, {255, 255, 0}, {0, 0, 0}, 
                            {255, 255, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {255, 255, 0}, 
                            {0, 0, 0}, {255, 174, 0}, {255, 255, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {255, 255, 0}, {255, 174, 0}, {0, 0, 0}, 
                            {0, 0, 0}, {255, 255, 0}, {255, 255, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {255, 255, 0}, {255, 255, 0}, {0, 0, 0}, 
                            {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, 
                            {0, 0, 0}, {0, 0, 0}, {255, 174, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {255, 174, 0}, {0, 0, 0}, {0, 0, 0}, 
                            {0, 0, 0}, {0, 0, 0}, {255, 174, 0}, {255, 255, 0}, {255, 255, 0}, {255, 255, 0}, {255, 255, 0}, {255, 174, 0}, {0, 0, 0}, {0, 0, 0}, 
                            {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {255, 255, 0}, {255, 255, 0}, {255, 255, 0}, {255, 255, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, 
                       };

// Ayyo Sprite
uint8_t spriteAyyo[][3] = {   
                            {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, 
                            {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, 
                            {0, 0, 0}, {34, 200, 255}, {34, 200, 255}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {34, 200, 255}, {34, 200, 255}, {0, 0, 0}, 
                            {0, 0, 0}, {34, 200, 255}, {34, 200, 255}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {34, 200, 255}, {34, 200, 255}, {0, 0, 0}, 
                            {0, 0, 0}, {34, 200, 255}, {34, 200, 255}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {34, 200, 255}, {34, 200, 255}, {0, 0, 0}, 
                            {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, 
                            {0, 0, 0}, {0, 0, 0}, {34, 200, 255}, {34, 200, 255}, {34, 200, 255}, {34, 200, 255}, {34, 200, 255}, {34, 200, 255}, {0, 0, 0}, {0, 0, 0}, 
                            {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, 
                       };

// Anger Sprite
uint8_t spriteAnger[][3] = {   
                            {255, 0, 0}, {255, 0, 0}, {0, 0, 0}, {255, 0, 0}, {0, 0, 0}, {0, 0, 0}, {255, 0, 0}, {0, 0, 0}, {255, 0, 0}, {255, 0, 0}, 
                            {0, 0, 0}, {0, 0, 0}, {255, 0, 0}, {255, 0, 0}, {0, 0, 0}, {0, 0, 0}, {255, 0, 0}, {255, 0, 0}, {0, 0, 0}, {0, 0, 0}, 
                            {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {255, 0, 0}, {0, 0, 0}, {0, 0, 0}, {255, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, 
                            {0, 0, 0}, {255, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {255, 0, 0}, {0, 0, 0}, 
                            {0, 0, 0}, {255, 0, 0}, {255, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {255, 0, 0}, {255, 0, 0}, {0, 0, 0}, 
                            {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, 
                            {0, 0, 0}, {0, 0, 0}, {255, 0, 0}, {255, 0, 0}, {255, 0, 0}, {255, 0, 0}, {255, 0, 0}, {255, 0, 0}, {0, 0, 0}, {0, 0, 0}, 
                            {0, 0, 0}, {255, 0, 0}, {255, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {255, 0, 0}, {255, 0, 0}, {0, 0, 0}, 
                       };

// Nope Sprite
uint8_t spriteNope[][3] = {   
                            {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {255, 0, 0}, {255, 0, 0}, {255, 0, 0}, {255, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, 
                            {0, 0, 0}, {0, 0, 0}, {255, 0, 0}, {255, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {255, 0, 0}, {0, 0, 0}, {0, 0, 0}, 
                            {0, 0, 0}, {255, 0, 0}, {255, 0, 0}, {255, 0, 0}, {255, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {255, 0, 0}, {0, 0, 0}, 
                            {0, 0, 0}, {255, 0, 0}, {0, 0, 0}, {255, 0, 0}, {255, 0, 0}, {255, 0, 0}, {0, 0, 0}, {0, 0, 0}, {255, 0, 0}, {0, 0, 0}, 
                            {0, 0, 0}, {255, 0, 0}, {0, 0, 0}, {0, 0, 0}, {255, 0, 0}, {255, 0, 0}, {255, 0, 0}, {0, 0, 0}, {255, 0, 0}, {0, 0, 0}, 
                            {0, 0, 0}, {255, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {255, 0, 0}, {255, 0, 0}, {255, 0, 0}, {255, 0, 0}, {0, 0, 0}, 
                            {0, 0, 0}, {0, 0, 0}, {255, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {255, 0, 0}, {255, 0, 0}, {0, 0, 0}, {0, 0, 0}, 
                            {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {255, 0, 0}, {255, 0, 0}, {255, 0, 0}, {255, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, 
                       };

// Save Sprite
uint8_t spriteSave[][3] = {   
                            {0, 0, 0}, {255, 0, 0}, {255, 0, 0}, {50, 50, 50}, {50, 50, 50}, {50, 50, 50}, {50, 50, 50}, {255, 0, 0}, {0, 0, 0}, {0, 0, 0}, 
                            {0, 0, 0}, {255, 0, 0}, {255, 0, 0}, {50, 50, 50}, {50, 50, 50}, {0, 0, 0}, {50, 50, 50}, {255, 0, 0}, {255, 0, 0}, {0, 0, 0}, 
                            {0, 0, 0}, {255, 0, 0}, {255, 0, 0}, {50, 50, 50}, {50, 50, 50}, {0, 0, 0}, {50, 50, 50}, {255, 0, 0}, {255, 0, 0}, {0, 0, 0}, 
                            {0, 0, 0}, {255, 0, 0}, {255, 0, 0}, {255, 0, 0}, {255, 0, 0}, {255, 0, 0}, {255, 0, 0}, {255, 0, 0}, {255, 0, 0}, {0, 0, 0}, 
                            {0, 0, 0}, {255, 0, 0}, {255, 255, 255}, {255, 255, 255}, {255, 255, 255}, {255, 255, 255}, {255, 255, 255}, {255, 255, 255}, {255, 0, 0}, {0, 0, 0}, 
                            {0, 0, 0}, {255, 0, 0}, {255, 255, 255}, {50, 50, 50}, {50, 50, 50}, {50, 50, 50}, {50, 50, 50}, {255, 255, 255}, {255, 0, 0}, {0, 0, 0},
                            {0, 0, 0}, {255, 0, 0}, {255, 255, 255}, {255, 255, 255}, {255, 255, 255}, {255, 255, 255}, {255, 255, 255}, {255, 255, 255}, {255, 0, 0}, {0, 0, 0}, 
                            {0, 0, 0}, {255, 0, 0}, {255, 255, 255}, {50, 50, 50}, {50, 50, 50}, {50, 50, 50}, {50, 50, 50}, {255, 255, 255}, {255, 0, 0}, {0, 0, 0},
                       };


void setup() 
{
  strip.begin();
  strip.setBrightness(100);
  strip.show(); // Initialize all pixels to 'off'
  
  Serial.begin(38400);
  Serial.flush();       // Clear receive buffer.
}
void loop()
{  
  for(uint8_t i = 0; i < 80; i++)
  {
    int r = spriteAyyo[i][0];
    int g = spriteAyyo[i][1];
    int b = spriteAyyo[i][2]; 
    strip.setPixelColor(i, strip.Color(r, g, b));
  }
  strip.show();
  
  if (Serial.available() > 0)
  {          // Check receive buffer.
      rxChar = Serial.read();            // Save character received. 
      Serial.flush();                    // Clear receive buffer.
    
    switch (rxChar) {
      
      case 'a':
      case 'A':                          // If received 'a' or 'A':
        Serial.print("Received Command A");
        
        for(uint8_t i = 0; i < 80; i++)
        {
          int r = spriteSave[i][0];
          int g = spriteSave[i][1];
          int b = spriteSave[i][2]; 
          strip.setPixelColor(i, strip.Color(r, g, b));
        }   
        strip.show();
        delay(1000);
      break;

      case 'b':
      case 'B':                          // If received 'b' or 'B':
        Serial.print("Received Command B");
        
        for(uint8_t i = 0; i < 80; i++)
        {
          int r = spriteSave[i][0];
          int g = spriteSave[i][1];
          int b = spriteSave[i][2]; 
          strip.setPixelColor(i, strip.Color(r, g, b));
        }   
        strip.show();
        delay(1000);
      break;

      case 'c':
      case 'C':                          // If received 'c' or 'C':
        Serial.print("Received Command C");
        
        for(uint8_t i = 0; i < 80; i++)
        {
          int r = spriteSave[i][0];
          int g = spriteSave[i][1];
          int b = spriteSave[i][2]; 
          strip.setPixelColor(i, strip.Color(r, g, b));
        }   
        strip.show();
        delay(1000);
      break;

      case 'd':
      case 'D':                          // If received 'd' or 'D':
        Serial.print("Received Command D");
        
        for(uint8_t i = 0; i < 80; i++)
        {
          int r = spriteNope[i][0];
          int g = spriteNope[i][1];
          int b = spriteNope[i][2]; 
          strip.setPixelColor(i, strip.Color(r, g, b));
        }   
        strip.show();
        delay(1000);
      break;

      case 'e':
      case 'E':                          // If received 'e' or 'E':
        Serial.print("Received Command E");      
        theaterChaseRainbow(50);
      break;

      case 'f':
      case 'F':                          // If received 'f' or 'F':
        Serial.print("Received Command F");      
        
        for(uint8_t i = 0; i < 80; i++)
        {
          int r = spriteWeh[i][0];
          int g = spriteWeh[i][1];
          int b = spriteWeh[i][2]; 
          strip.setPixelColor(i, strip.Color(r, g, b));
        }   
        strip.show();
        delay(1000);
      break;

      case 'g':
      case 'G':                          // If received 'g' or 'G':
        Serial.print("Received Command G");      
        
        for(uint8_t i = 0; i < 80; i++)
        {
          int r = spriteAnger[i][0];
          int g = spriteAnger[i][1];
          int b = spriteAnger[i][2]; 
          strip.setPixelColor(i, strip.Color(r, g, b));
        }   
        strip.show();
        delay(1000);
      break;

      case 'h':
      case 'H':                          // If received 'h' or 'H':
        Serial.print("Received Command H");      
        
        for(uint8_t i = 0; i < 80; i++)
        {
          int r = spriteSmiley[i][0];
          int g = spriteSmiley[i][1];
          int b = spriteSmiley[i][2]; 
          strip.setPixelColor(i, strip.Color(r, g, b));
        }   
        strip.show();
        delay(1000);
      break;
      
      default:                           
        Serial.print("'");
        Serial.print((char)rxChar);
        Serial.println("' is not a command!");
      break;
    }
  }
}


//Theatre-style crawling lights with rainbow effect
void theaterChaseRainbow(uint8_t wait) {
  for (int j=0; j < 256; j++) {     // cycle all 256 colors in the wheel
    for (int q=0; q < 3; q++) {
      for (uint16_t i=0; i < strip.numPixels(); i=i+3) {
        strip.setPixelColor(i+q, Wheel( (i+j) % 255));    //turn every third pixel on
      }
      strip.show();

      delay(wait);

      for (uint16_t i=0; i < strip.numPixels(); i=i+3) {
        strip.setPixelColor(i+q, 0);        //turn every third pixel off
      }
    }
  }
}

// Input a value 0 to 255 to get a color value.
// The colours are a transition r - g - b - back to r.
uint32_t Wheel(byte WheelPos) {
  WheelPos = 255 - WheelPos;
  if(WheelPos < 85) {
    return strip.Color(255 - WheelPos * 3, 0, WheelPos * 3);
  }
  if(WheelPos < 170) {
    WheelPos -= 85;
    return strip.Color(0, WheelPos * 3, 255 - WheelPos * 3);
  }
  WheelPos -= 170;
  return strip.Color(WheelPos * 3, 255 - WheelPos * 3, 0);
}
